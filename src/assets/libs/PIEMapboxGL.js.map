{"version":3,"file":"PIEMapboxGL.js","sources":["../src/core/oldVersion/index.ts","../src/type/enum/LayerType.ts","../src/core/oldVersion/Control/Draw/index.js","../src/core/oldVersion/Control/Measure/index.js","../src/type/enum/SourceType.ts","../src/core/source/TileSource.ts","../src/core/template/BaseSource.ts","../src/core/layer/index.ts","../src/core/layer/TDTTileLayer.ts","../src/core/template/BaseLayer.ts"],"sourcesContent":["// @ts-nocheck\r\n\r\nimport Draw from './Control/Draw'\r\nimport Measure from './Control/Measure'\r\n\r\n\r\nexport default {\r\n  Draw,\r\n  Measure\r\n}","enum LayerType {\r\n  VECTOR = 'vector',\r\n  GEOJSON = 'geojson',\r\n  RASTER = 'raster',\r\n}\r\n\r\nexport default LayerType\r\n","import MapboxDraw from \"@mapbox/mapbox-gl-draw\";\r\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css'\r\n\r\nclass DrawControl extends MapboxDraw {\r\n  constructor(options) {\r\n    super(options)\r\n  }\r\n}\r\n\r\nexport default DrawControl\r\n","// import Base from '../Base'\r\n// import Button from '../Button'\r\n// import Panel from '../Panel'\r\n// import {\r\n//   measurePointFeatures,\r\n//   measureLineFeatures,\r\n//   measurePolygonFeatures,\r\n//   measureLenthFunc,\r\n//   measureAreaFunc,\r\n// } from './source'\r\n// import { measureIcon } from '../../Icon'\r\n// import './index.css'\r\n\r\n// const LINE_TYPE = 'line'\r\n// const POLYGON_TYPE = 'polygon'\r\n\r\n// const MEASURE_POINT_LINE_SOURCE = 'measure_point_line_source'\r\n// const MEASURE_POINT_AREA_SOURCE = 'measure_point_area_source'\r\n// const MEASURE_LINE_SOURCE = 'measure_line_source'\r\n// const MEASURE_AREA_SOURCE = 'measure_area_source'\r\n\r\n// const MEASURE_POINT_LINE_LAYER = 'measure_point_line_layer'\r\n// const MEASURE_POINT_AREA_LAYER = 'measure_point_area_layer'\r\n// const MEASURE_LINE_LAYER = 'measure_line_layer'\r\n// const MEASURE_AREA_LAYER = 'measure_area_layer'\r\n\r\n// const MAIN_COLOR = '#565268'\r\n// const SECOND_COLOR = '#F70968'\r\n\r\n// /**\r\n//  * mainColor\r\n//  * secondColor\r\n//  * distance boolean 是否需要距离量测\r\n//  * area boolean 是否需要面积量测\r\n//  */\r\n// class MeasureControl extends Base {\r\n//   constructor(options) {\r\n//     super()\r\n\r\n//     this.withCollapsePanel = true\r\n\r\n//     this.isMeasuring = false\r\n//     this.measureType = null\r\n\r\n//     this.resultPanel = new Panel()\r\n\r\n//     this.measureBtn = new Button()\r\n//     this.distanceBtn = new Button()\r\n//     this.areaBtn = new Button()\r\n//     this.clearBtn = new Button()\r\n\r\n//     this.coordinates = []\r\n\r\n//     this.mainColor = options?.mainColor || MAIN_COLOR\r\n//     this.secondColor = options?.secondColor || SECOND_COLOR\r\n\r\n//     this.measureLength = 0\r\n//     this.measureArea = 0\r\n\r\n//     this.mapClickListener = this.mapClickListener.bind(this)\r\n//     this.mapdblclickListener = this.mapdblclickListener.bind(this)\r\n//     this.mapMouseMoveListener = this.mapMouseMoveListener.bind(this)\r\n//     this.mapMouseMoveOnceListener = this.mapMouseMoveOnceListener.bind(this)\r\n//   }\r\n\r\n//   createCollapsePanel() {\r\n//     this.collapsePanel = new Panel()\r\n//     this.container.appendChild(this.collapsePanel.container)\r\n//     this.collapsePanel.setDisVisible()\r\n\r\n//     this.collapsePanel.addClassName('measure-collapse')\r\n\r\n//     const con =  document.createElement('div')\r\n//     con.className = 'mapboxgl-measure-content'\r\n//     con.appendChild(this.distanceBtn.node)\r\n//     con.appendChild(this.areaBtn.node)\r\n//     con.appendChild(this.clearBtn.node)\r\n\r\n//     this.collapsePanel.addPanelChild(con)\r\n//   }\r\n\r\n//   changeCollapsePanelVis() {\r\n//     this.collapsePanelShow = !this.collapsePanelShow\r\n//     if (!this.collapsePanelShow) {\r\n//       this.collapsePanel.setDisVisible()\r\n//     } else {\r\n//       this.collapsePanel.setVisible()\r\n//     }\r\n//   }\r\n\r\n//   init() {\r\n//     // 创建折叠面板\r\n//     this.createCollapsePanel()\r\n\r\n//     this.measureBtn.setIcon(measureIcon(), '量测')\r\n//     this.distanceBtn.setText('距离')\r\n//     this.areaBtn.setText('面积')\r\n//     this.clearBtn.setText('清除')\r\n\r\n//     this.measureBtn.onClick(() => {\r\n//       this.changeCollapsePanelVis()\r\n//     })\r\n\r\n//     this.distanceBtn.onClick(() => {\r\n//       this.measureType === POLYGON_TYPE && this.measureOff()\r\n//       this.measureType = LINE_TYPE\r\n//       if (!this.map.getSource(MEASURE_LINE_SOURCE) && !this.map.getLayer(MEASURE_LINE_LAYER)) {\r\n//         this.measureOn()\r\n//       }\r\n//     })\r\n//     this.areaBtn.onClick(() => {\r\n//       this.measureType === LINE_TYPE && this.measureOff()\r\n//       this.measureType = POLYGON_TYPE\r\n//       if (!this.map.getSource(MEASURE_AREA_SOURCE) && !this.map.getLayer(MEASURE_AREA_LAYER)) {\r\n//         this.measureOn()\r\n//       }\r\n//     })\r\n\r\n//     this.clearBtn.onClick(() => this.measureOff())\r\n\r\n//     this.addButton(this.measureBtn)\r\n//   }\r\n\r\n//   draw() {\r\n//     // draw line or polygon\r\n//     if (this.measureType === LINE_TYPE) {\r\n//       this.measureLength = 0\r\n//       this.map.addSource(MEASURE_POINT_LINE_SOURCE, {\r\n//         type: 'geojson',\r\n//         data: null,\r\n//       })\r\n//       this.map.addLayer({\r\n//         id: MEASURE_POINT_LINE_LAYER,\r\n//         type: 'circle',\r\n//         source: MEASURE_POINT_LINE_SOURCE,\r\n//         paint: {\r\n//           'circle-color': this.mainColor,\r\n//           'circle-radius': 6,\r\n//         },\r\n//       })\r\n\r\n//       this.map.addSource(MEASURE_LINE_SOURCE, {\r\n//         type: 'geojson',\r\n//         data: null,\r\n//       })\r\n//       this.map.addLayer({\r\n//         id: MEASURE_LINE_LAYER,\r\n//         type: 'line',\r\n//         source: MEASURE_LINE_SOURCE,\r\n//         paint: {\r\n//           'line-color': this.mainColor,\r\n//           'line-width': 4,\r\n//         },\r\n//       })\r\n//     } else if (this.measureType === POLYGON_TYPE) {\r\n//       this.measureArea = 0\r\n//       this.map.addSource(MEASURE_POINT_AREA_SOURCE, {\r\n//         type: 'geojson',\r\n//         data: null,\r\n//       })\r\n//       this.map.addLayer({\r\n//         id: MEASURE_POINT_AREA_LAYER,\r\n//         type: 'circle',\r\n//         source: MEASURE_POINT_AREA_SOURCE,\r\n//         paint: {\r\n//           'circle-color': this.mainColor,\r\n//           'circle-radius': 6,\r\n//         },\r\n//       })\r\n\r\n//       this.map.addSource(MEASURE_AREA_SOURCE, {\r\n//         type: 'geojson',\r\n//         data: null,\r\n//       })\r\n//       this.map.addLayer({\r\n//         id: MEASURE_AREA_LAYER,\r\n//         type: 'fill',\r\n//         source: MEASURE_AREA_SOURCE,\r\n//         paint: {\r\n//           'fill-color': this.mainColor,\r\n//           'fill-opacity': 0.75,\r\n//           'fill-outline-color': this.secondColor,\r\n//         },\r\n//       })\r\n//     }\r\n//   }\r\n\r\n//   measureOn() {\r\n//     this.isMeasuring = true\r\n\r\n//     this.map.getCanvas().style.cursor = 'crosshair'\r\n//     this.map.doubleClickZoom.disable()\r\n\r\n//     // 结果面板\r\n//     this.map.addControl(this.resultPanel, 'bottom-right')\r\n//     this.resultPanel.addClassName('measure-result')\r\n\r\n//     this.generatePanel(null, '测量开始')\r\n\r\n//     this.draw()\r\n\r\n//     // 地图事件\r\n//     this.map.on('click', this.mapClickListener)\r\n//     this.map.on('dblclick', this.mapdblclickListener)\r\n//     this.map.once('mousemove', this.mapMouseMoveOnceListener)\r\n//     this.map.on('mousemove', this.mapMouseMoveListener)\r\n//   }\r\n\r\n//   measureOff() {\r\n//     this.isMeasuring = false\r\n//     this.map.getCanvas().style.cursor = 'default'\r\n\r\n//     this.coordinates = []\r\n\r\n//     if (this.measureType && this.measureType === LINE_TYPE) {\r\n//       this.map.removeLayer(MEASURE_POINT_LINE_LAYER)\r\n//       this.map.removeSource(MEASURE_POINT_LINE_SOURCE)\r\n//       this.map.removeLayer(MEASURE_LINE_LAYER)\r\n//       this.map.removeSource(MEASURE_LINE_SOURCE)\r\n//     } else if (this.measureType && this.measureType === POLYGON_TYPE) {\r\n//       this.map.removeLayer(MEASURE_POINT_AREA_LAYER)\r\n//       this.map.removeSource(MEASURE_POINT_AREA_SOURCE)\r\n//       this.map.removeLayer(MEASURE_AREA_LAYER)\r\n//       this.map.removeSource(MEASURE_AREA_SOURCE)\r\n//     }\r\n\r\n//     this.measureType = null\r\n//     this.map.doubleClickZoom.disable()\r\n//     this.map.removeControl(this.resultPanel)\r\n\r\n//     this.map.off('click', this.mapClickListener)\r\n//     this.map.off('dblclick', this.mapdblclickListener)\r\n//     this.map.off('mousemove', this.mapMouseMoveListener)\r\n//   }\r\n\r\n//   generatePanel(node, text) {\r\n//     const resultPanelContent = document.createElement('div')\r\n\r\n//     if (node) {\r\n//       resultPanelContent.innerHTML = node\r\n//     }\r\n//     if (text) {\r\n//       resultPanelContent.innerText = text\r\n//     }\r\n\r\n//     this.resultPanel.setPanelContent(resultPanelContent)\r\n//   }\r\n\r\n//   mapClickListener(event) {\r\n//     const { lngLat } = event\r\n\r\n//     const clickCoordinate = [lngLat.lng, lngLat.lat]\r\n//     this.coordinates.push(clickCoordinate)\r\n\r\n//     const pointSource = this.map.getSource(\r\n//       this.measureType === LINE_TYPE ? MEASURE_POINT_LINE_SOURCE : MEASURE_POINT_AREA_SOURCE\r\n//     )\r\n//     pointSource.setData(measurePointFeatures(this.coordinates))\r\n\r\n//     if (this.measureType === LINE_TYPE) {\r\n//       const lineSource = this.map.getSource(MEASURE_LINE_SOURCE)\r\n//       const resultF = measureLineFeatures(this.coordinates)\r\n\r\n//       if (resultF) {\r\n//         lineSource.setData(resultF)\r\n//       }\r\n//     } else if (this.measureType === POLYGON_TYPE) {\r\n//       const polygonSource = this.map.getSource(MEASURE_AREA_SOURCE)\r\n//       const resultF = measurePolygonFeatures(this.coordinates)\r\n\r\n//       if (resultF) {\r\n//         polygonSource.setData(resultF)\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   mapdblclickListener() {\r\n//     this.map.off('click', this.mapClickListener)\r\n//     this.map.off('mousemove', this.mapMouseMoveListener)\r\n//     this.map.getCanvas().style.cursor = 'default'\r\n\r\n//     this.coordinates.pop() // 最后双击时触发的一次单击事件创建的点\r\n//     this.coordinates.pop() // 用来触发移动时线效果的点\r\n\r\n//     if (this.measureType === LINE_TYPE) {\r\n//       this.generatePanel(null, '测量结果：距离:' + this.measureLength + 'km')\r\n//     } else {\r\n//       this.generatePanel(null, '测量结果：面积:' + this.measureArea + 'm2')\r\n//     }\r\n\r\n//     this.map.off('dblclick', this.mapdblclickListener)\r\n//   }\r\n\r\n//   mapMouseMoveListener(event) {\r\n//     const { lngLat } = event\r\n//     const moveCoordinate = [lngLat.lng, lngLat.lat]\r\n\r\n//     if (this.coordinates.length > 0) {\r\n//       this.coordinates[this.coordinates.length - 1] = moveCoordinate\r\n\r\n//       if (this.measureType === LINE_TYPE) {\r\n//         const lineSource = this.map.getSource(MEASURE_LINE_SOURCE)\r\n//         const lineF = measureLineFeatures(this.coordinates)\r\n//         lineSource.setData(lineF)\r\n\r\n//         if (lineF) {\r\n//           this.measureLength = measureLenthFunc(lineF)\r\n//           this.generatePanel(null, '距离:' + this.measureLength + 'km')\r\n//         }\r\n//       } else if (this.measureType === POLYGON_TYPE) {\r\n//         const areaSource = this.map.getSource(MEASURE_AREA_SOURCE)\r\n//         const polygonF = measurePolygonFeatures(this.coordinates)\r\n//         areaSource.setData(polygonF)\r\n\r\n//         if (polygonF) {\r\n//           this.measureArea = measureAreaFunc(polygonF)\r\n//           this.generatePanel(null, '面积:' + this.measureArea + 'm2')\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   mapMouseMoveOnceListener(event) {\r\n//     const { lngLat } = event\r\n//     const moveCoordinate = [lngLat.lng, lngLat.lat]\r\n\r\n//     this.coordinates.push(moveCoordinate)\r\n//   }\r\n\r\n//   onAddControl() {\r\n//     this.init()\r\n//   }\r\n// }\r\n\r\n// export default MeasureControl\r\n\r\nimport MapboxDraw from '@mapbox/mapbox-gl-draw'\r\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css'\r\nimport * as turf from '@turf/turf'\r\n\r\nclass MeasureControl extends MapboxDraw {\r\n\r\n  constructor (options) {\r\n    super(options)\r\n  }\r\n\r\n  onAdd(mapInstance) {\r\n    mapInstance.on('draw:create', this.drawUpdateHandle)\r\n    mapInstance.on('draw:delete', this.drawUpdateHandle)\r\n    mapInstance.on('draw:update', this.drawUpdateHandle)\r\n  }\r\n\r\n  drawUpdateHandle(event) {\r\n    console.log(event)\r\n\r\n    const data = this.getAll()\r\n\r\n    console.log(data)\r\n  }\r\n}\r\n\r\nexport default MeasureControl\r\n","enum SourceType {\r\n  RASTER = 'raster',\r\n}\r\n\r\nexport default SourceType\r\n","import { RasterSource } from 'mapbox-gl'\r\nimport BaseSource from 'src/core/template/BaseSource'\r\nimport SourceType from 'src/type/enum/SourceType'\r\nimport ITileSourceProps from 'src/type/interface/props/source/ITileSourceProps'\r\n\r\nclass TileSource extends BaseSource implements RasterSource {\r\n  type: SourceType.RASTER\r\n  tiles?: string[] | undefined\r\n  tileSize?: number | undefined\r\n\r\n  constructor(props: ITileSourceProps) {\r\n    super(props)\r\n\r\n    const { url } = props\r\n\r\n    this.type = SourceType.RASTER\r\n\r\n    this.tiles = [url]\r\n    this.tileSize = 256\r\n  }\r\n}\r\n\r\nexport default TileSource\r\n","import { nanoid } from 'nanoid'\r\nimport { Nullable } from 'src/type/common'\r\nimport SourceType from 'src/type/enum/SourceType'\r\nimport IBaseSource from 'src/type/interface/IBaseSource'\r\nimport IBaseSourceProps from 'src/type/interface/props/IBaseSourceProps'\r\n\r\nabstract class BaseSource implements IBaseSource {\r\n  private _sourceId: string\r\n\r\n  public type: SourceType\r\n  id: string\r\n\r\n  constructor(props: IBaseSourceProps) {\r\n    const { sourceId } = props\r\n\r\n    this._sourceId = sourceId ?? nanoid()\r\n\r\n    this.id = sourceId ?? nanoid()\r\n    this.type = SourceType.RASTER\r\n  }\r\n  getSourceId(): string {\r\n    return this._sourceId\r\n  }\r\n}\r\n\r\nexport default BaseSource\r\n","import TDTTileLayer from './TDTTileLayer'\r\n\r\nexport default { TDTTileLayer }\r\n","import { RasterLayer} from 'mapbox-gl'\r\nimport BaseLayer from 'src/core/template/BaseLayer'\r\nimport LayerType from 'src/type/enum/LayerType'\r\nimport ITDTTileLayerProps from 'src/type/interface/props/layer/ITDTTileLayerProps'\r\nimport TileSource from '../source/TileSource'\r\n\r\nclass TDTTileLayer extends BaseLayer implements RasterLayer {\r\n  type: LayerType.RASTER\r\n\r\n  constructor(props: ITDTTileLayerProps) {\r\n    super(props)\r\n\r\n    const { url, sourceId } = props\r\n\r\n    this.source = new TileSource({ url, sourceId })\r\n\r\n    this.type = LayerType.RASTER\r\n  }\r\n}\r\n\r\nexport default TDTTileLayer\r\n","import { nanoid } from 'nanoid'\r\nimport ILayerProps from 'src/type/interface/props/layer/ILayerPropsMap'\r\nimport IBaseLayer from 'src/type/interface/IBaseLayer'\r\nimport SourceTypeMap from 'src/type/interface/source/SourceTypeMap'\r\nimport { Nullable } from 'src/type/common'\r\nimport LayerType from 'src/type/enum/LayerType'\r\n\r\nabstract class BaseLayer implements IBaseLayer {\r\n  private _token: string\r\n  id: string\r\n  type: string\r\n  source!: SourceTypeMap\r\n\r\n  constructor(props: ILayerProps) {\r\n    this._isValidProps(props)\r\n\r\n    const { mapInstance, id, token } = props\r\n\r\n    this._isValidId(id)\r\n\r\n    this.id = id ?? nanoid()\r\n    this.type = LayerType.RASTER\r\n    this._token = token\r\n  }\r\n\r\n  private _isValidProps(props: ILayerProps): void {\r\n    // console.dir(props)\r\n  }\r\n\r\n  private _isValidId(id: string | undefined): void {\r\n    // console.log(id)\r\n  }\r\n\r\n  getLayerId(): string {\r\n    return this.id\r\n  }\r\n\r\n  getToken(): string {\r\n    return this._token\r\n  }\r\n\r\n  getSource(): Nullable<SourceTypeMap> {\r\n    return this.source\r\n  }\r\n\r\n  getSourceId(): string {\r\n    if (!this.source) {\r\n      throw new Error(\"not find layer's source\")\r\n    }\r\n\r\n    return this.source.getSourceId()\r\n  }\r\n}\r\n\r\nexport default BaseLayer\r\n"],"names":["LayerType","index$1","MapboxDraw","constructor","options","super","onAdd","mapInstance","on","this","drawUpdateHandle","event","console","log","data","getAll","SourceType","LayerType$1","SourceType$1","TileSource","props","sourceId","_sourceId","nanoid","id","type","RASTER","getSourceId","url","tiles","tileSize","index","TDTTileLayer","_isValidProps","token","_isValidId","_token","getLayerId","getToken","getSource","source","Error"],"mappings":"gJAMA,ICNKA,EDMUC,EAAA,MEHf,cAA0BC,EACxBC,YAAYC,GACVC,MAAMD,aC+UV,cAA6BF,EAE3BC,YAAaC,GACXC,MAAMD,GAGRE,MAAMC,GACJA,EAAYC,GAAG,cAAeC,KAAKC,kBACnCH,EAAYC,GAAG,cAAeC,KAAKC,kBACnCH,EAAYC,GAAG,cAAeC,KAAKC,kBAGrCA,iBAAiBC,GACfC,QAAQC,IAAIF,GAEZ,MAAMG,EAAOL,KAAKM,SAElBH,QAAQC,IAAIC,OFrWhB,SAAKd,GACHA,EAAA,OAAA,SACAA,EAAA,QAAA,UACAA,EAAA,OAAA,SAHF,CAAKA,IAAAA,EAIJ,KAED,IGNKgB,EHMLC,EAAejB,GGNf,SAAKgB,GACHA,EAAA,OAAA,SADF,CAAKA,IAAAA,EAEJ,KAED,IAAAE,EAAeF,ECCf,MAAMG,UCCN,MAMEhB,YAAYiB,GACV,MAAMC,SAAEA,GAAaD,EAErBX,KAAKa,UAAYD,MAAAA,EAAAA,EAAYE,IAE7Bd,KAAKe,GAAKH,MAAAA,EAAAA,EAAYE,IACtBd,KAAKgB,KAAOT,EAAWU,OAEzBC,cACE,OAAOlB,KAAKa,YDXdnB,YAAYiB,GACVf,MAAMe,GAEN,MAAMQ,IAAEA,GAAQR,EAEhBX,KAAKgB,KAAOT,EAAWU,OAEvBjB,KAAKoB,MAAQ,CAACD,GACdnB,KAAKqB,SAAW,KEhBpB,IAAeC,EAAA,CAAEC,aCIjB,cCCA,MAME7B,YAAYiB,GACVX,KAAKwB,cAAcb,GAEnB,MAAMb,YAAEA,EAAWiB,GAAEA,EAAEU,MAAEA,GAAUd,EAEnCX,KAAK0B,WAAWX,GAEhBf,KAAKe,GAAKA,MAAAA,EAAAA,EAAMD,IAChBd,KAAKgB,KAAOzB,EAAU0B,OACtBjB,KAAK2B,OAASF,EAGRD,cAAcb,IAIde,WAAWX,IAInBa,aACE,OAAO5B,KAAKe,GAGdc,WACE,OAAO7B,KAAK2B,OAGdG,YACE,OAAO9B,KAAK+B,OAGdb,cACE,IAAKlB,KAAK+B,OACR,MAAM,IAAIC,MAAM,2BAGlB,OAAOhC,KAAK+B,OAAOb,gBDzCrBxB,YAAYiB,GACVf,MAAMe,GAEN,MAAMQ,IAAEA,EAAGP,SAAEA,GAAaD,EAE1BX,KAAK+B,OAAS,IAAIrB,EAAW,CAAES,IAAAA,EAAKP,SAAAA,IAEpCZ,KAAKgB,KAAOzB,EAAU0B"}